{"version":3,"sources":["Context/State.tsx","CustomHooks/VerifyAddress.tsx","CustomHooks/HelperFunctions.ts","Components/BillingAddress.tsx","Components/CartIcon.tsx","MockData/sampleData.ts","Components/Buy.tsx","Components/Shipping.tsx","Components/ShoppingCart.tsx","Components/Billing.tsx","MockData/confirmation.ts","Components/Order.tsx","App.tsx","index.tsx"],"names":["StateContext","React","StateProvider","children","cart","setCart","lastname","firstname","streetname","streetnumber","postalcode","city","email","address","setAddress","twoAddresses","set2Addresses","hasAddress","setHasAddress","billingAddress","setBillingAddress","payMethod","setStatePayMethod","newsLetter","setNewsLetter","agbs","setAGBs","Provider","value","sumItems","sum","length","amount","calcSum","item","price","reset","EAddress","useVerifyAddress","setter","error","setError","validateInput","name","val","nameCheck","match","checkName","postalCheck","checkPostal","streetCheck","checkStreet","emailCheck","handleChange","e","target","prev","checkCompleteness","arr","complete","type","setCompleteType","key","bool","Object","entries","BillingAddress","setComplete","history","useHistory","replace","id","to","className","autoComplete","onChange","onClick","CartIcon","count","setCount","data","product","image","Buy","shopData","setShopData","a","Promise","resolve","map","ShopItem","itemCount","action","src","alt","helper","index","findIndex","Shipping","checked","Preview","splice","ShoppingCart","shopRef","show","setShow","total","items","setTotal","ref","Billing","setPayMethod","setPay","placeholder","pattern","confirmOrder","news","orderID","Date","now","orderNumber","Math","floor","random","customerName","deliveryAddress","customerMail","newsletterAbo","Order","confirmed","setConfirmd","confirm","App","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8356c999.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { TPayMethod } from \"../Components/Billing\";\n\nexport interface TContext {\n    cart: TCart[];\n    setCart: React.Dispatch<React.SetStateAction<TCart[]>>;\n    address: TAddress;\n    setAddress: React.Dispatch<React.SetStateAction<TAddress>>;\n    sumItems: () => number;\n    calcSum: () => number;\n    twoAddresses: boolean;\n    set2Addresses: React.Dispatch<React.SetStateAction<boolean>>;\n    hasAddress: boolean;\n    setHasAddress: React.Dispatch<React.SetStateAction<boolean>>;\n    billingAddress: TAddress;\n    setBillingAddress: React.Dispatch<React.SetStateAction<TAddress>>;\n    payMethod: TPayMethod;\n    setStatePayMethod: React.Dispatch<React.SetStateAction<TPayMethod>>;\n    newsLetter: boolean;\n    setNewsLetter: React.Dispatch<React.SetStateAction<boolean>>;\n    agbs: boolean;\n    setAGBs: React.Dispatch<React.SetStateAction<boolean>>;\n    reset: () => void;\n}\n\nexport interface TCart {\n    id: number;\n    product: string;\n    amount: number;\n    price: number;\n    image: string;\n}\n\nexport interface TAddress {\n    lastname: string;\n    firstname: string;\n    streetname: string;\n    streetnumber: string;\n    postalcode: string;\n    city: string;\n    email?: string;\n}\n\nexport const StateContext = React.createContext<TContext | null>(null!);\n\nexport default function StateProvider({\n    children,\n}: {\n    children: React.ReactNode;\n}) {\n    const [cart, setCart] = React.useState<TCart[]>([]);\n    const [address, setAddress] = React.useState<TAddress>({\n        lastname: \"\",\n        firstname: \"\",\n        streetname: \"\",\n        streetnumber: \"\",\n        postalcode: \"\",\n        city: \"\",\n        email: \"\",\n    });\n\n    const [twoAddresses, set2Addresses] = React.useState<boolean>(false);\n    const [hasAddress, setHasAddress] = React.useState<boolean>(false);\n\n    const [billingAddress, setBillingAddress] = React.useState<TAddress>({\n        lastname: \"\",\n        firstname: \"\",\n        streetname: \"\",\n        streetnumber: \"\",\n        postalcode: \"\",\n        city: \"\",\n    });\n\n    const [payMethod, setStatePayMethod] = React.useState<TPayMethod>(\"\");\n\n    const [newsLetter, setNewsLetter] = React.useState<boolean>(false);\n    const [agbs, setAGBs] = React.useState<boolean>(false);\n\n    const calcSum = (): number => {\n        let sum = 0;\n        if (cart.length > 0) {\n            for (let item of cart) {\n                sum += item.amount * item.price;\n            }\n        }\n        return sum;\n    };\n\n    const sumItems = (): number => {\n        let sum: number = 0;\n        if (cart.length > 0) {\n            for (let item of cart) {\n                sum += item.amount;\n            }\n        }\n        return sum;\n    };\n\n    const reset = (): void => {\n        setCart([]);\n        setAddress({\n            lastname: \"\",\n            firstname: \"\",\n            streetname: \"\",\n            streetnumber: \"\",\n            postalcode: \"\",\n            city: \"\",\n            email: \"\",\n        });\n        set2Addresses(false);\n        setHasAddress(false);\n        setBillingAddress({\n            lastname: \"\",\n            firstname: \"\",\n            streetname: \"\",\n            streetnumber: \"\",\n            postalcode: \"\",\n            city: \"\",\n            email: \"\",\n        });\n        setAGBs(false);\n        setStatePayMethod(\"\");\n        setNewsLetter(false);\n    };\n\n    return (\n        <StateContext.Provider\n            value={{\n                cart,\n                setCart,\n                address,\n                setAddress,\n                sumItems,\n                calcSum,\n                twoAddresses,\n                set2Addresses,\n                hasAddress,\n                setHasAddress,\n                billingAddress,\n                setBillingAddress,\n                payMethod,\n                setStatePayMethod,\n                newsLetter,\n                setNewsLetter,\n                agbs,\n                setAGBs,\n                reset,\n            }}\n        >\n            {children}\n        </StateContext.Provider>\n    );\n}\n","import * as React from \"react\";\nimport { TAddress } from \"../Context/State\";\nimport {\n    checkName,\n    checkPostal,\n    checkStreet,\n    checkEmail,\n} from \"./HelperFunctions\";\n\nexport enum EAddress {\n    lastname = \"lastname\",\n    firstname = \"firstname\",\n    streetname = \"streetname\",\n    streetnumber = \"streetnumber\",\n    postalcode = \"postalcode\",\n    city = \"city\",\n    email = \"email\",\n}\n\nexport type TCompletenss = {\n    complete: boolean;\n    type: {\n        lastname: boolean;\n        firstname: boolean;\n        streetname: boolean;\n        streetnumber: boolean;\n        postalcode: boolean;\n        city: boolean;\n        email?: boolean;\n    };\n};\n\ntype TUseSetState<T> = React.Dispatch<React.SetStateAction<T>>;\n\nfunction useVerifyAddress<T>(setter: TUseSetState<T>) {\n    const [error, setError] = React.useState<string[]>([]);\n\n    const validateInput = (name: string, val: string): boolean => {\n        if (\n            name === EAddress.lastname ||\n            name === EAddress.firstname ||\n            name === EAddress.streetname ||\n            name === EAddress.city\n        ) {\n            const nameCheck = checkName(name, val);\n            if (!nameCheck[0]) {\n                setError([nameCheck[1]]);\n                return false;\n            } else {\n                setError([]);\n                return true;\n            }\n        }\n\n        if (name === EAddress.postalcode) {\n            const postalCheck = checkPostal(val);\n            if (!postalCheck[0]) {\n                setError([postalCheck[1]]);\n                return false;\n            } else {\n                setError([]);\n                return true;\n            }\n        }\n\n        if (name === EAddress.streetnumber) {\n            const streetCheck = checkStreet(val);\n            if (!streetCheck[0]) {\n                setError([streetCheck[1]]);\n                return false;\n            } else {\n                setError([]);\n                return true;\n            }\n        }\n\n        if (name === EAddress.email) {\n            const emailCheck = checkEmail(val);\n            if (!emailCheck[0]) {\n                setError([emailCheck[1]]);\n                return false;\n            } else {\n                setError([]);\n                return true;\n            }\n        }\n\n        return true;\n    };\n\n    const checkCompleteness = (address: TAddress): TCompletenss => {\n        let arr: TCompletenss = {\n            complete: true,\n            type: {\n                lastname: false,\n                firstname: false,\n                streetname: false,\n                streetnumber: false,\n                postalcode: false,\n                city: false,\n                email: false,\n            },\n        };\n\n        const setCompleteType = (key: string, bool: boolean) => {\n            if (key === EAddress.lastname) {\n                arr.type.lastname = bool;\n            } else if (key === EAddress.firstname) {\n                arr.type.firstname = bool;\n            } else if (key === EAddress.streetname) {\n                arr.type.streetname = bool;\n            } else if (key === EAddress.streetnumber) {\n                arr.type.streetnumber = bool;\n            } else if (key === EAddress.postalcode) {\n                arr.type.postalcode = bool;\n            } else if (key === EAddress.city) {\n                arr.type.city = bool;\n            } else if (key === EAddress.email) {\n                arr.type.email = bool;\n            }\n        };\n\n        for (let [key, value] of Object.entries(address)) {\n            if (!value) {\n                setCompleteType(key, false);\n                arr.complete = false;\n            } else if (!validateInput(key, value)) {\n                setCompleteType(key, false);\n                arr.complete = false;\n            } else {\n                setCompleteType(key, true);\n            }\n        }\n\n        return arr;\n    };\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            target: { name, value },\n        } = e;\n\n        setter((prev) => {\n            return { ...prev, [name]: value };\n        });\n\n        validateInput(name, value);\n    };\n\n    return { handleChange, error, checkCompleteness };\n}\n\nexport default useVerifyAddress;\n","export const checkName = (name: string, val: string): [boolean, string] => {\n    if (val.match(/^([A-Za-z0-9 äöüÄÖÜß -,._']){2,15}$/i)) {\n        return [true, \"\"];\n    } else {\n        return [\n            false,\n            `${name}: length: 2-15 cahracters, all alphabetical characters, numbers, and following special characters:[-,._'] allowed.`,\n        ];\n    }\n};\n\nexport const checkPostal = (val: string): [boolean, string] => {\n    if (val.match(/^\\d{5}$/g)) {\n        return [true, \"\"];\n    } else {\n        return [false, `Postalcode: Must contain 5 numbers!`];\n    }\n};\n\nexport const checkStreet = (val: string): [boolean, string] => {\n    if (val.match(/^\\d{1,6}[a-z]?$/gi)) {\n        return [true, \"\"];\n    } else {\n        return [\n            false,\n            `Street-number: Must contain a number (max. 6 numbers), can contain one letter.`,\n        ];\n    }\n};\n\nexport const checkEmail = (email: string): [boolean, string] => {\n    if (email.match(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/)) {\n        return [true, \"\"];\n    } else {\n        return [false, \"No valid email\"];\n    }\n};\n","import * as React from \"react\";\nimport \"./Shipping.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { StateContext, TAddress, TContext } from \"../Context/State\";\nimport useVerifyAddress, {\n    EAddress,\n    TCompletenss,\n} from \"../CustomHooks/VerifyAddress\";\n\nconst BillingAddress: React.FC = () => {\n    const {\n        billingAddress,\n        setBillingAddress,\n        set2Addresses,\n    } = React.useContext<TContext | null>(StateContext)!;\n\n    const { error, handleChange, checkCompleteness } = useVerifyAddress(\n        setBillingAddress\n    );\n\n    const [complete, setComplete] = React.useState<TCompletenss>({\n        complete: false,\n        type: {\n            lastname: true,\n            firstname: true,\n            streetname: true,\n            streetnumber: true,\n            postalcode: true,\n            city: true,\n        },\n    });\n\n    const history = useHistory();\n\n    const nextPage = (val: TAddress): void => {\n        setComplete(checkCompleteness(val));\n    };\n\n    React.useEffect(() => {\n        set2Addresses(false);\n        if (complete.complete) {\n            set2Addresses(true);\n            history.replace(\"/billing\");\n        }\n    }, [complete]);\n\n    return (\n        <div id=\"shipping\">\n            <Link to=\"/shoppingcart\" className=\"back\">\n                <i className=\"fas fa-chevron-left\"></i> Go back to bag\n            </Link>\n            <form>\n                <h3>Billing Address</h3>\n                {error.length > 0 && <h6 className=\"error\">{error}</h6>}\n                <label>Last name:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.lastname}\n                    value={billingAddress.lastname}\n                    onChange={handleChange}\n                    className={complete.type.lastname ? \"\" : \"empty\"}\n                />\n                <label>First name:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.firstname}\n                    value={billingAddress.firstname}\n                    onChange={handleChange}\n                    className={complete.type.firstname ? \"\" : \"empty\"}\n                />\n                <label>Street name:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.streetname}\n                    value={billingAddress.streetname}\n                    onChange={handleChange}\n                    className={complete.type.streetname ? \"\" : \"empty\"}\n                />\n                <label>Street number:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.streetnumber}\n                    value={billingAddress.streetnumber}\n                    onChange={handleChange}\n                    className={complete.type.streetnumber ? \"\" : \"empty\"}\n                />\n                <label>ZIP Code</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.postalcode}\n                    value={billingAddress.postalcode}\n                    onChange={handleChange}\n                    className={complete.type.postalcode ? \"\" : \"empty\"}\n                />\n                <label>City name</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.city}\n                    value={billingAddress.city}\n                    onChange={handleChange}\n                    className={complete.type.city ? \"\" : \"empty\"}\n                />\n                <div id=\"question-address\"></div>\n            </form>\n            <button\n                className=\"next\"\n                type=\"button\"\n                onClick={() => nextPage(billingAddress)}\n            >\n                Next <i className=\"fas fa-chevron-right\"></i>\n            </button>\n        </div>\n    );\n};\n\nexport default BillingAddress;\n","import * as React from \"react\";\nimport { StateContext, TContext } from \"../Context/State\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./CartIcon.css\";\n\nexport const CartIcon: React.FC = () => {\n    const { cart, sumItems } = React.useContext<TContext | null>(StateContext)!;\n\n    const history = useHistory();\n\n    const [count, setCount] = React.useState<number>(0);\n\n    React.useEffect(() => {\n        setCount(sumItems);\n    }, [cart]);\n\n    return (\n        <div onClick={() => history.replace(\"/shoppingcart\")} id=\"cart-icon\">\n            <i className=\"fas fa-shopping-cart\"></i>\n            <div>{count}</div>\n        </div>\n    );\n};\n","export interface TData {\n    id: number;\n    product: string;\n    image: string;\n    price: number;\n}\n\nexport default function getShopData(): Promise<TData[]> {\n    return Promise.resolve(data);\n}\n\nconst data: TData[] = [\n    { id: 1, product: \"watch\", image: \"./images/Memory12.jpg\", price: 19 },\n    { id: 2, product: \"lock\", image: \"./images/Memory15.jpg\", price: 2 },\n    { id: 3, product: \"lighter\", image: \"./images/Memory16.jpg\", price: 23 },\n    { id: 4, product: \"ring\", image: \"./images/Memory26.jpg\", price: 25 },\n    { id: 5, product: \"stone\", image: \"./images/Memory27.jpg\", price: 15 },\n    { id: 6, product: \"tea\", image: \"./images/Memory37.jpg\", price: 1 },\n    { id: 7, product: \"lemon\", image: \"./images/Memory39.jpg\", price: 14 },\n    { id: 8, product: \"filter\", image: \"./images/Memory46.jpg\", price: 15 },\n    { id: 9, product: \"scrubber\", image: \"./images/Memory47.jpg\", price: 20 },\n    { id: 10, product: \"tabs\", image: \"./images/Memory48.jpg\", price: 100 },\n    {\n        id: 11,\n        product: \"green cotton\",\n        image: \"./images/Memory49.jpg\",\n        price: 190,\n    },\n    {\n        id: 12,\n        product: \"black cotton\",\n        image: \"./images/Memory50.jpg\",\n        price: 18,\n    },\n];\n","import * as React from \"react\";\nimport \"./Buy.css\";\nimport { CartIcon } from \"./CartIcon\";\nimport getShopData, { TData } from \"../MockData/sampleData\";\nimport { StateContext, TContext } from \"../Context/State\";\n\nexport const Buy: React.FC = () => {\n    const [shopData, setShopData] = React.useState<TData[]>([]);\n\n    React.useEffect(() => {\n        (async () => {\n            const data: TData[] = await getShopData();\n            setShopData(data);\n        })();\n    }, []);\n\n    return (\n        <div id=\"buy\">\n            <header>\n                <h1>SHOP MORE STUFF!</h1>\n                <CartIcon />\n            </header>\n\n            <div className=\"buy\">\n                {shopData.length > 0 &&\n                    shopData.map((item) => (\n                        <ShopItem {...item} key={item.id} />\n                    ))}\n            </div>\n        </div>\n    );\n};\n\ntype Action = \"increment\" | \"decrement\";\n\nconst ShopItem: React.FC<TData> = (item) => {\n    const [count, setCount] = React.useState<number>(0);\n\n    const { cart, setCart } = React.useContext<TContext | null>(StateContext)!;\n\n    const itemCount = (action: Action): void => {\n        switch (action) {\n            case \"decrement\":\n                count === 0 ? setCount(0) : setCount((prev) => prev - 1);\n                break;\n            case \"increment\":\n                setCount((prev) => prev + 1);\n                break;\n        }\n    };\n\n    const addToCart = () => {\n        if (count > 0) {\n            const helper = [...cart];\n\n            const index = helper.findIndex((value) => value.id === item.id);\n            if (index === -1) {\n                setCart((prev) => [\n                    ...prev,\n                    {\n                        id: item.id,\n                        product: item.product,\n                        amount: count,\n                        price: item.price,\n                        image: item.image,\n                    },\n                ]);\n            } else {\n                helper[index].amount += count;\n                setCart(helper);\n            }\n        }\n\n        setCount(0);\n    };\n\n    return (\n        <div className=\"container\" key={item.product}>\n            <img src={item.image} alt=\"watch\"></img>\n            <h4>{item.product}</h4>\n            <h6>{item.price}€</h6>\n            <div className=\"select\">\n                <button onClick={() => itemCount(\"decrement\")}>-</button>\n                <div className=\"counter\">{count}</div>\n                <button onClick={() => itemCount(\"increment\")}>+</button>\n            </div>\n            <button onClick={addToCart}>ADD</button>\n        </div>\n    );\n};\n","import * as React from \"react\";\nimport \"./Shipping.css\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { StateContext, TAddress, TContext } from \"../Context/State\";\nimport useVerifyAddress, {\n    EAddress,\n    TCompletenss,\n} from \"../CustomHooks/VerifyAddress\";\n\nconst Shipping: React.FC = () => {\n    const {\n        address,\n        setAddress,\n        twoAddresses,\n        set2Addresses,\n        setHasAddress,\n    } = React.useContext<TContext | null>(StateContext)!;\n\n    const { error, handleChange, checkCompleteness } = useVerifyAddress(\n        setAddress\n    );\n\n    const [complete, setComplete] = React.useState<TCompletenss>({\n        complete: false,\n        type: {\n            lastname: true,\n            firstname: true,\n            streetname: true,\n            streetnumber: true,\n            postalcode: true,\n            city: true,\n            email: true,\n        },\n    });\n\n    const history = useHistory();\n\n    const nextPage = (val: TAddress): void => {\n        setComplete(checkCompleteness(val));\n    };\n\n    React.useEffect(() => {\n        setHasAddress(false);\n        if (complete.complete && twoAddresses) {\n            setHasAddress(true);\n            history.replace(\"/billingaddress\");\n        } else if (complete.complete && !twoAddresses) {\n            setHasAddress(true);\n            history.replace(\"/billing\");\n        }\n    }, [complete]);\n\n    return (\n        <div id=\"shipping\">\n            <Link to=\"/shoppingcart\" className=\"back\">\n                <i className=\"fas fa-chevron-left\"></i> Go back to bag\n            </Link>\n            <form>\n                <h3>Shipping Address</h3>\n                {error.length > 0 && <h6 className=\"error\">{error}</h6>}\n                <label>Your last name:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.lastname}\n                    value={address.lastname}\n                    onChange={handleChange}\n                    className={complete.type.lastname ? \"\" : \"empty\"}\n                />\n                <label>Your first name:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.firstname}\n                    value={address.firstname}\n                    onChange={handleChange}\n                    className={complete.type.firstname ? \"\" : \"empty\"}\n                />\n                <label>Street name:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.streetname}\n                    value={address.streetname}\n                    onChange={handleChange}\n                    className={complete.type.streetname ? \"\" : \"empty\"}\n                />\n                <label>Street number:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.streetnumber}\n                    value={address.streetnumber}\n                    onChange={handleChange}\n                    className={complete.type.streetnumber ? \"\" : \"empty\"}\n                />\n                <label>ZIP Code</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.postalcode}\n                    value={address.postalcode}\n                    onChange={handleChange}\n                    className={complete.type.postalcode ? \"\" : \"empty\"}\n                />\n                <label>City name</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.city}\n                    value={address.city}\n                    onChange={handleChange}\n                    className={complete.type.city ? \"\" : \"empty\"}\n                />\n                <label>Your email:</label>\n                <input\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    name={EAddress.email}\n                    value={address.email}\n                    onChange={handleChange}\n                    className={complete.type.email ? \"\" : \"empty\"}\n                />\n\n                <div id=\"question-address\">\n                    <input\n                        type=\"checkbox\"\n                        checked={twoAddresses}\n                        onChange={() => set2Addresses((prev) => !prev)}\n                    />\n                    <label>I have a different billing address</label>\n                </div>\n            </form>\n            <button\n                className=\"next\"\n                type=\"button\"\n                onClick={() => nextPage(address)}\n            >\n                Next <i className=\"fas fa-chevron-right\"></i>\n            </button>\n        </div>\n    );\n};\n\nexport default Shipping;\n","import * as React from \"react\";\nimport \"./ShoppingCart.css\";\nimport { StateContext, TContext, TCart } from \"../Context/State\";\nimport { Link } from \"react-router-dom\";\n\ntype Action = \"increment\" | \"decrement\" | \"delete\";\n\nconst ShoppingCart: React.FC = () => {\n    const { cart, calcSum, sumItems } = React.useContext<TContext | null>(\n        StateContext\n    )!;\n\n    const shopRef = React.useRef<HTMLDivElement>(null!);\n\n    const [show, setShow] = React.useState<string>(\"hide\");\n    const [total, setTotal] = React.useState<{ total: number; items: number }>({\n        total: 0,\n        items: 0,\n    });\n\n    React.useEffect(() => {\n        setShow(\"show\");\n    }, []);\n\n    React.useEffect(() => {\n        setTotal({ total: calcSum(), items: sumItems() });\n    }, [cart]);\n\n    return (\n        <div id=\"shopping-cart\" className={show} ref={shopRef}>\n            <div id=\"shopping-cart-container\">\n                <i className=\"fas fa-shopping-cart\"></i>\n                <Link id=\"close\" to=\"/\">\n                    X\n                </Link>\n                {cart.length === 0 && <h6>No items in your shopping cart!</h6>}\n                <>\n                    {cart.length > 0 &&\n                        cart.map((item, index) => (\n                            <Preview {...item} index={index} key={item.id} />\n                        ))}\n                    {cart.length > 0 && (\n                        <div id=\"total\">\n                            <h5>Total: </h5>\n                            <h5>{total.items} Items</h5>\n                            <h5>{total.total}€</h5>\n                        </div>\n                    )}\n                    {cart.length > 0 && (\n                        <Link to=\"/shipping\" className=\"preview-link\">\n                            <div id=\"checkout\">Checkout</div>\n                        </Link>\n                    )}\n                </>\n            </div>\n        </div>\n    );\n};\n\nconst Preview = ({\n    id,\n    product,\n    amount,\n    price,\n    image,\n    index,\n}: TCart & { index: number }) => {\n    const { setCart } = React.useContext<TContext | null>(StateContext)!;\n\n    const itemCount = (action: Action): void => {\n        switch (action) {\n            case \"decrement\":\n                amount >= 0\n                    ? itemCount(\"delete\")\n                    : setCart((prev) => {\n                          const helper = [...prev];\n                          helper[index].amount = amount - 1;\n                          return helper;\n                      });\n                break;\n            case \"increment\":\n                setCart((prev) => {\n                    const helper = [...prev];\n                    helper[index].amount = amount + 1;\n                    return helper;\n                });\n                break;\n            case \"delete\":\n                setCart((prev) => {\n                    const helper = [...prev];\n                    helper.splice(index, 1);\n                    return helper;\n                });\n                break;\n        }\n    };\n    return (\n        <div key={id} className=\"preview\">\n            <img src={image} alt={product}></img>\n            <div>\n                <h5>Product: {product}</h5>\n                <h5>Quantity: {amount}</h5>\n                <h6>Amount: {price * amount}€</h6>\n            </div>\n            <div>\n                <div className=\"select\">\n                    <button onClick={() => itemCount(\"decrement\")}>-</button>\n                    <div className=\"counter\">{amount}</div>\n                    <button onClick={() => itemCount(\"increment\")}>+</button>\n                </div>\n                <div className=\"icon\" onClick={() => itemCount(\"delete\")}>\n                    <i className=\"fas fa-trash\"></i>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ShoppingCart;\n","import * as React from \"react\";\nimport \"./Billing.css\";\nimport { Link } from \"react-router-dom\";\nimport { StateContext, TContext } from \"../Context/State\";\n\nexport type TPayMethod = \"credit\" | \"debit\" | \"invoice\" | \"\";\n\nconst Billing: React.FC = () => {\n    const { setStatePayMethod } = React.useContext<TContext | null>(\n        StateContext\n    )!;\n\n    const [payMethod, setPayMethod] = React.useState<TPayMethod>(\"\");\n\n    const setPay = (e: any) => {\n        setPayMethod(e.target.value);\n        setStatePayMethod(e.target.value);\n    };\n\n    return (\n        <div id=\"billing\">\n            <Link to=\"/shoppingcart\" className=\"back\">\n                <i className=\"fas fa-chevron-left\"></i> Go back to bag\n            </Link>\n            <form id=\"billing-container\">\n                <h3>Billing</h3>\n                <div className=\"billing-choice\">\n                    <div>\n                        <input\n                            type=\"radio\"\n                            value=\"credit\"\n                            checked={payMethod === \"credit\"}\n                            onChange={setPay}\n                        />\n                        <label>Pay with credit card</label>\n                    </div>\n                    <br></br>\n                    {payMethod === \"credit\" && (\n                        <div>\n                            <p>\n                                Pay with your credit card. Enter your payment\n                                details and you will be charged as soon as it\n                                leaves our warehouse.\n                            </p>\n                            <div id=\"credit\">\n                                <input\n                                    type=\"text\"\n                                    name=\"name\"\n                                    placeholder=\"Name on CreditCard\"\n                                />\n                                <input\n                                    type=\"password\"\n                                    name=\"creditCardNumber\"\n                                    placeholder=\"CreditCard number\"\n                                />\n                                <label>Expiration date:</label>\n                                <input type=\"month\" name=\"date\" />\n                                <label>CVV number:</label>\n                                <input\n                                    type=\"text\"\n                                    name=\"cvv\"\n                                    placeholder=\"123\"\n                                    pattern=\"^\\d{3}$\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <div className=\"billing-choice\">\n                    <div>\n                        <input\n                            type=\"radio\"\n                            value=\"invoice\"\n                            checked={payMethod === \"invoice\"}\n                            onChange={setPay}\n                        />\n                        <label>Pay later (per invoice)</label>\n                    </div>\n                    <br></br>\n                    {payMethod === \"invoice\" && (\n                        <div>\n                            <p>\n                                Pay after delivery for the items you want to\n                                keep. You'll get an invoice once your order has\n                                left our warehouse and have 14 days to pay. You\n                                just have to enter your date of birth.\n                            </p>\n                            <div id=\"credit\">\n                                <label>Date of birth:</label>\n                                <input type=\"date\" name=\"birthdate\" />\n                            </div>\n                        </div>\n                    )}\n                </div>\n                <div className=\"billing-choice\">\n                    <div>\n                        <div>\n                            <input\n                                type=\"radio\"\n                                value=\"debit\"\n                                checked={payMethod === \"debit\"}\n                                onChange={setPay}\n                            />\n                            <label>Pay with debit card</label>\n                        </div>\n                        <br></br>\n                        {payMethod === \"debit\" && (\n                            <div>\n                                <p>\n                                    Pay with your debit card. Enter your bank\n                                    details and you will be charged as soon as\n                                    it leaves our warehouse.\n                                </p>\n                                <div id=\"credit\">\n                                    <input\n                                        type=\"text\"\n                                        name=\"name\"\n                                        placeholder=\"Name on debitcard\"\n                                    />\n                                    <input\n                                        type=\"text\"\n                                        name=\"ibanNumber\"\n                                        placeholder=\"IBAN number\"\n                                    />\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </form>\n            {payMethod && (\n                <Link to=\"/order\" className=\"next\">\n                    Next <i className=\"fas fa-chevron-right\"></i>\n                </Link>\n            )}\n        </div>\n    );\n};\n\nexport default Billing;\n","import { TAddress } from \"../Context/State\";\n\nexport interface TOrderConfirm {\n    orderID: string;\n    orderNumber: number;\n    customerName: string;\n    customerMail: string;\n    deliveryAddress: string;\n    newsletterAbo: boolean;\n}\n\nexport const confirmOrder = (\n    address: TAddress,\n    news: boolean\n): Promise<TOrderConfirm> => {\n    const orderID = address.lastname + Date.now();\n    const orderNumber = Math.floor(Math.random() * (999999 - 100000)) + 100000;\n    const customerName = address.lastname + \", \" + address.firstname;\n    const deliveryAddress =\n        address.firstname +\n        \" \" +\n        address.lastname +\n        \"\\n\" +\n        address.streetname +\n        \" \" +\n        address.streetnumber +\n        \"\\n\" +\n        address.postalcode +\n        \" \" +\n        address.city;\n\n    const data: TOrderConfirm = {\n        orderID,\n        orderNumber,\n        customerName,\n        customerMail: address.email!,\n        deliveryAddress,\n        newsletterAbo: news,\n    };\n\n    return Promise.resolve(data);\n};\n","import * as React from \"react\";\nimport \"./Order.css\";\nimport { StateContext, TContext } from \"../Context/State\";\nimport { Link } from \"react-router-dom\";\nimport { confirmOrder, TOrderConfirm } from \"../MockData/confirmation\";\n\nconst Order: React.FC = () => {\n    const {\n        address,\n        billingAddress,\n        twoAddresses,\n        hasAddress,\n        payMethod,\n        cart,\n        calcSum,\n        sumItems,\n        agbs,\n        setAGBs,\n        newsLetter,\n        setNewsLetter,\n        reset,\n    } = React.useContext<TContext | null>(StateContext)!;\n\n    const [total, setTotal] = React.useState<{ total: number; items: number }>({\n        total: 0,\n        items: 0,\n    });\n\n    const [confirmed, setConfirmd] = React.useState<TOrderConfirm | null>(null);\n\n    React.useEffect(() => {\n        setTotal({ total: calcSum(), items: sumItems() });\n    }, [cart]);\n\n    const confirm = async () => {\n        const data = await confirmOrder(address, newsLetter);\n        setConfirmd(data);\n        reset();\n    };\n\n    if (!confirmed) {\n        return (\n            <div id=\"order\">\n                <Link to=\"/billing\" className=\"back\">\n                    <i className=\"fas fa-chevron-left\"></i> Go back to Billing\n                </Link>\n                <div id=\"order-container\">\n                    <h5>\n                        {twoAddresses\n                            ? \"Delivery address:\"\n                            : \"Delivery and billing address:\"}\n                    </h5>\n                    <div>\n                        <p>\n                            {address.firstname} {address.lastname}\n                        </p>\n                        <p>\n                            {address.streetname} {address.streetnumber}\n                        </p>\n                        <p>\n                            {address.postalcode} {address.city}\n                        </p>\n                    </div>\n                    <Link to=\"/shipping\" className=\"edit\">\n                        Edit\n                    </Link>\n                    {twoAddresses && (\n                        <div>\n                            <h5>billing address:</h5>\n                            <div>\n                                <p>\n                                    {billingAddress.firstname}{\" \"}\n                                    {billingAddress.lastname}\n                                </p>\n                                <p>\n                                    {billingAddress.streetname}{\" \"}\n                                    {billingAddress.streetnumber}\n                                </p>\n                                <p>\n                                    {billingAddress.postalcode}{\" \"}\n                                    {billingAddress.city}\n                                </p>\n                            </div>\n                        </div>\n                    )}\n                    {twoAddresses && (\n                        <Link to=\"/billingaddress\" className=\"edit\">\n                            Edit\n                        </Link>\n                    )}\n                    <h5 className=\"line\">Your order:</h5>\n                    {cart.length > 0 &&\n                        cart.map((item) => (\n                            <div key={item.id} className=\"preview\">\n                                <img src={item.image} alt={item.product}></img>\n                                <div>\n                                    <h5>Product: {item.product}</h5>\n                                    <h5>Quantity: {item.amount}</h5>\n                                    <h6>Amount: {item.price * item.amount}€</h6>\n                                </div>\n                            </div>\n                        ))}\n                    <div id=\"total\">\n                        <h5>Total: </h5>\n                        <h5>{total.items} Items</h5>\n                        <h5>{total.total}€</h5>\n                    </div>\n                    <Link to=\"/shoppingcart\" className=\"edit\">\n                        Edit\n                    </Link>\n                    <h5 className=\"line\">Paymethod: {payMethod}</h5>\n                    <div id=\"question-address\" className=\"line\">\n                        <input\n                            type=\"checkbox\"\n                            checked={agbs}\n                            onChange={() => setAGBs((prev) => !prev)}\n                        />\n                        <label>I accept the terms of business</label>\n                    </div>\n                    <div id=\"question-address\" className=\"line\">\n                        <input\n                            type=\"checkbox\"\n                            onChange={() => setNewsLetter((prev) => !prev)}\n                        />\n                        <label>I subscribe to the newsletter</label>\n                    </div>\n                </div>\n\n                {payMethod && agbs && total.items > 0 && hasAddress && (\n                    <button className=\"next\" onClick={confirm}>\n                        Buy <i className=\"fas fa-chevron-right\"></i>\n                    </button>\n                )}\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"order\">\n                <Link to=\"/\" className=\"back\">\n                    <i className=\"fas fa-chevron-left\"></i> Go back to main\n                </Link>\n                <div id=\"order-container\">\n                    <h3>Order confirmation:</h3>\n                    <div>\n                        <p>OrderId: {confirmed.orderID}</p>\n                        <p>OrderNumber: {confirmed.orderNumber}</p>\n                        <p>Customer Name: {confirmed.customerName}</p>\n                        <p>Customer Mail: {confirmed.customerMail}</p>\n                        <p>Delivery Address: {confirmed.deliveryAddress}</p>\n                        <p>\n                            Newsletter subscription:{\" \"}\n                            {confirmed.newsletterAbo ? \"yes\" : \"no\"}\n                        </p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n};\n\nexport default Order;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport BillingAddress from \"./Components/BillingAddress\";\nimport { Buy } from \"./Components/Buy\";\nimport Shipping from \"./Components/Shipping\";\nimport ShoppingCart from \"./Components/ShoppingCart\";\nimport Billing from \"./Components/Billing\";\nimport Order from \"./Components/Order\";\nimport StateProvider from \"./Context/State\";\n\nconst App: React.FC = () => {\n    return (\n        <BrowserRouter>\n            <StateProvider>\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Buy />\n                    </Route>\n                    <Route exact path=\"/shoppingcart\">\n                        <ShoppingCart />\n                    </Route>\n                    <Route exact path=\"/shipping\">\n                        <Shipping />\n                    </Route>\n                    <Route exact path=\"/billingaddress\">\n                        <BillingAddress />\n                    </Route>\n                    <Route exact path=\"/billing\">\n                        <Billing />\n                    </Route>\n                    <Route exact path=\"/order\">\n                        <Order />\n                    </Route>\n                    <Route render={() => <Redirect to=\"/\" />}></Route>\n                </Switch>\n            </StateProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}